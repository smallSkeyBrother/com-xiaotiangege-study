一、redis相关：
（0）有哪些作用，能干什么
（1）快和性能高的本质原因
（2）可以存放哪些数据模型
（3）io模型
（4）线程模式
（5）cap原理，基于ap
（6）集群模式，如何保证数据安全和高可用
（7）主从备份
（8）日志数据落盘模式
（9）哨兵和集群模式之间的优缺点
（10）和MemoryCache相比的优缺点

二、redis中字符串结构和优劣势
（1）结构组成
	1. Redis 中存放字符串，没有使用c语言中的String格式
	2. 使用SDS(simple Dyminc String) 来存放字符串，处理系统中的打印日志使用c的字符串，其他涉及到的字符串都使用SDS
	3. SDS 结构体中包含三个字段： int len（存字符串的长度）； int free（空闲字符串的长度）； char[] buf（存放字符串对应的字节）。
	4. buf的长度是实际能存放字符长度的 + 1； 字符串末尾使用‘\0’和c语言中的字符串保持一致。

（2）涉及优点
    1. 系统统一的字符处理方式
    2. 保存目前字符串长度，和空闲空间，有有效控制字符串操作过程中的越界问题。
    3. 在获取字符串长度的时候，可以直接返回SDS中记录的字符串长度。
	4. 使用和c字符串保持一致的存放方式，可以直接使用c语言中的一些库函数。
	5. SDS中的api对字符串进行操作的时候，先判断长度够不够，不够进行扩容后，再进行增加长度。
	6. SDS在创建数组的时候采用预分配空间，如果长度小于1M的字符串，则分配 2 倍的空间，如果大于1M则分配 N + 1M的空间， 避免了多次释放空间造成性能消耗。
	7. SDS对于缩短字符串的时候，不直接释放多余的空间，二采取暂时保留，延迟释放空间。
	8. Redis使用二进制处理存放到其内部的字符串。

（3）redis为什么快
    1. Redis是纯内存数据库，一般都是简单的存取操作，线程占用的时间很多，时间的花费主要集中在IO上，所以读取速度快。
    2. Redis使用的是非阻塞IO，IO多路复用，使用了单线程来轮询描述符，将数据库的开、关、读、写都转换成了事件，减少了线程切换时上下文的切换和竞争。　　
    3. Redis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争。
    4. 数据结构也帮了不少忙，Redis全程使用hash结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储，再如，跳表，使用有序的数据结构加快读取的速度。
    5. Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。

三、集群搭建
（1）redis启动集群配置命令

cd /usr/local/redis-4.0.1/src/ ./redis-trib.rb create --replicas 1 172.16.180.226:7000 172.16.180.226:7001 172.16.180.226:7002 172.16.180.227:7003 172.16.180.227:7004 172.16.180.227:7005
./redis-trib.rb create --replicas 1 10.40.10.223:7000 10.40.10.223:7001 10.40.10.223:7002 10.40.10.223:7003 10.40.10.223:7004 10.40.10.223:7005